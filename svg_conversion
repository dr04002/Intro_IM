// p5.js sketch that renders an SVG path (with lines & beziers) using p5 primitives.
// Supports M/m, L/l, H/h, V/v, C/c, S/s, Q/q, T/t, Z/z.

const VIEWBOX = { x: 0, y: 0, w: 595.28, h: 841.89 }; // from <svg viewBox>
const SCALE = 1.0;          // change to scale drawing (e.g. 0.8, 1.2, etc.)
const OFFSET = { x: 0, y: 0 }; // translate the drawing on canvas

// Your SVG path data (concatenated all 'd' attributes in order)
const PATHS = [
`M16.94,818.42l.07-128.34,27.44-11.69c38.24-25.54,79.01-47.14,118.63-70.41,2.54-2.79,4.48-11.56,3.97-15.22-.1-.73.3-.93-.78-.78-26.55,13.8-53.04,27.84-78.69,43.25-19.77,11.88-40.29,27.73-61.23,36.75-3,1.29-6.11,2.89-9.41,3.1v-15.98l13.13-4.71c32.57-17.91,64.42-37.01,96.36-55.93,8.97-5.31,18.59-9.72,27.47-15.13,14.67-8.92,16.64-16.28,17.93-33.2,1.37-18.03.78-36.3,1.62-54.36-9.71-21.13-9.19-44.83-13.83-67.14-13.58-1.18-20.13-14.44-26.19-24.93-3.43-5.94-9.52-16.2-10.95-22.61-2.24-10.05-2.97-22.32-4.55-32.75-1.4-9.24-6.77-28.16-3.5-36.32,3.47-8.65,10.48-14.05,19.65-9.68,1.12.53,7.02,4.9,7.43,4.55-3.09-11.93-4.06-24.27-5.93-36.42-4.34-28.2-10.1-56.22-4.18-84.79.08-1.15-1.94-1.98-1.99-2.66-.08-1.11,5.86-12.83,7.29-14.43l-1.07-1.04,8.53-13.86-1.58-1.06,16.77-20.54c.86-.98-.62-1.88-.64-2.38-.05-1.27,11.08-12.39,12.85-14.13l17.86-16.77-1.01-.32.18-1.03c8.52-5.12,17.71-9.03,26.87-12.84l-.26-1.56c.3-.52,6.64-2.86,7.86-3.32,1.47-.55,4.45-.94,5.37-1.43.65-.35.16-1.48,1.25-2.06,1.92-1.01,12.24-3.45,15.06-4.11,1.39-.33,6.65-.59,6.89-1.62l-.49-1.82c3.66.25,7.04-1.36,10.64,0v-2.14s14.37.53,14.37.53l-1.06-4.26c2.07.65,5.49,2.69,7.44,3,1.2.19,1.51-.84,2.79-.79,4.14.18,15.39,3.28,20.22,4.33,1.98.43,4.09,1.23,6.03,1.85l2.11-2.54,2.12,2.48,9.32-3.01c0,2.12-.6,3.18,1.69,3.91s16.1.23,16.95,1.42l-1.06,2.65,18.1,6.41c-.37,1.41-.87,1.97.56,2.89,12.29,5.22,24.65,9.94,35.69,17.6.91,1.1-1.54,2.38-.09,3.77,5.9,4.13,11.85,8.35,17.33,13.04,3.01,2.58,17.94,16.46,17.83,19.44-.03.67-.8,1.18-.84,1.6-.12,1.3,10.54,17.07,11.9,20.38,1.14,2.76.98,5.5,1.86,8.27l9.81,21.44-1.97,3.7c2.86,24.43-.56,48.76-3.77,72.96-1.8,13.61-4.67,27.14-5.78,40.83l12.64-7.89c3.35-.66,8.54,4.34,10.47,6.87,5.25,6.92,4.12,14.44,3.5,22.59-1.51,20-6,40.72-8.66,60.6-5.25,10.79-12.61,29.8-23.97,35.15-1.59.75-4.04.65-4.77,2.16-6.71,26.3-5.37,56.06-21.03,79.12l-3.84,71.8c.6,3.14,7.74,7.03,10.47,8.7,27.89,16.99,59.3,34.33,88.17,49.75,15.77,8.42,35.53,19.16,51.79,25.95,1.28.53,2.58.85,3.92,1.14v15.45c-7.13-2.56-14.2-5.33-21.12-8.43-43.98-19.67-83.79-47.45-126.49-69.46-.44-.22-1.12-.92-1.44-.16,2.23,5.32,2.33,11.65,6.2,16.17,22.23,11.38,43.11,25.14,64.78,37.46,24.71,14.05,51.09,25.04,78.07,34.01v128.94H16.94ZM332.07,170.51c-3.87.52-7.48,3.04-11.19,4.52-7.02,2.79-12.23,3.54-18.11,9.04l-5.3,6.68c12.53-4.89,24.16-11.77,34.59-20.24ZM271.91,172.11c-8.3,4.04-13.9,13.22-16.49,21.84l36.19-19.46c.1-1.41-.23-.54-.91-.37-3.87.93-8.28,2.5-11.99,3.98-5.32,2.12-10.06,5.11-15.31,7.32-.54-.46,8.15-9.33,8.79-11.22.29-.86-.21-1.31-.28-2.09ZM373.06,177.43h-11.98c-6.64,0-26.83,8.2-31.84,12.89-.4.38-1.58.83-.62,1.51l44.44-14.39ZM200.59,415.07c-13.7-17.6-31.43-36.46-33-59.94-.7-10.45-.61-25.22-.03-35.72.49-8.99,2.4-12.54,7.56-19.6,3.56-4.87,8.28-9.82,12.68-13.95,1.17-1.1,5.09-3.53,5.34-4.79-3.42-30.4-14.48-61.55-3.75-91.72,0-1.62-2.66-4.77-3.96-2.3-4.54,10.02-11.79,19.47-14.5,30.24-1.93,7.65-1.5,18.45-1.24,26.51.37,11.8,4,26.19-.66,37.12-4.69,10.99-11.2,17.32-12.62,30-1.93,17.27-1.56,37.58.6,54.8,4.01,32.01,10.05,67.25,16.06,99.01,3.59,18.94,6.94,26.86,19.01,41.71,10.96,13.49,24.33,27.69,36.44,40.25,8.39,8.7,24.59,26.53,35.3,30.73s42.79,3.44,55.77,2.83c19.59-.93,24.52-5.98,37.3-19.37,9.59-10.04,19.09-21.76,27.85-32.6,15.57-19.24,28.23-32.55,33.4-57.68,10.71-51.96,20.86-109.87,15.58-162.9-1.1-10.99-8.97-23.33-8.51-34.63.79-19.35,7.47-41.38-.28-59.94-3.69-8.84-10.89-19.84-18.35-25.86-.58-.47-1.95-1.83-2.67-1.06,2.83,4.22,3.71,9.65,4.62,14.56,2.95,15.95,2.27,29.1.1,45.05-1.58,11.63-4.2,23.16-6.32,34.69.16,1.63,5.03,4.39,6.41,5.85,3.93,4.16,15.16,21.14,16.24,26.37.95,4.59.08,11.85.23,16.84.38,12.73,2.02,29.33-2.25,41.4-6.08,17.17-19.91,30.58-28.61,46.22.51.48,5.42-3.04,6.24-3.61,7.27-4.99,13.82-11.07,20.64-16.63.53.17.29,1.34.22,1.81-2.69,16.88-7.83,35.07-11.42,51.98-2.48,11.66-4.21,23.58-6.9,35.19-3.22,13.93-10.1,22.95-18.68,34.05-10.35,13.4-24.05,30.55-35.61,42.68-13.74,14.41-25.09,12.59-43.68,12.27-11.87-.21-32.95.29-43-4.91s-30.5-28.51-38.96-37.73c-12.83-13.98-31.27-32.74-35.22-51.6-1.38-6.6-2.27-13.95-3.29-20.68-3.11-20.44-5.48-41.02-8.58-61.47.98-.12,1.67.55,2.38,1.07,3.38,2.46,6.85,6.17,10.42,8.75,3.39,2.45,7.7,5.63,11.68,6.69ZM283.62,309.04c-7.51,4.47-12.52,6.64-21.41,5.18-20.08-3.29-39.84-8.96-60.32-9.91-1.34.05-7.13,4.08-7.16,5.52l72.15,17.38c1.54.01,3.19-1.09,4.48-1.95,2.92-1.96,10.19-10.2,11.66-13.37.45-.97.79-1.73.61-2.85ZM404.23,310.35c-1.8-1.54-6.79-5.01-9.07-5.05-19.77,2.32-39.09,6.85-58.58,10.72-3.91-.27-6.64-3.22-9.57-5.38-.42-.31-.9-1.09-1.34-.26.61,3.53,2.14,6.8,4.04,9.81,1.18,1.86,4.73,6.89,6.87,7.02,16.66-3.67,33.06-8.58,49.76-12.05,5.46-1.13,13.29-1.51,18.26-3.04.34-.1,1.12-.57.92-.93-.77.17-.91-.51-1.29-.83ZM459.6,321.07c1.8-1.94,6.49-4.89,4.24-7.26-4.31-4.55-9.76,3.29-12.22,6.47-5.77,7.47-8.89,14.29-9.36,23.93,1.17.2,1.99-1.67,2.56-2.5,5.37-7.78,8.03-13.37,14.78-20.63ZM140.96,343.14c.42-6.78-2.6-13.92-6.47-19.36-2.01-2.82-8.46-9.82-11.6-10.79-1.92-.59-3.83.52-2.96,2.43.46,1.01,7.86,8.08,9.54,10.19,4.42,5.56,7.47,11.8,11.49,17.53ZM129.26,326.62l-3.26.31c-3.08,10.39-4.97,20.43-2.06,31.13l1.06-.79,4.26-30.65ZM293.2,343.14c-1.5-.07-1.98,1.1-2.15,2.37-1.47,11.15,1.22,25.32,0,36.81l.57,3.2-.41,10.77.94,18.77c1.28.41,1.49-1.29,1.75-2.23,1.24-4.43.38-6.31.35-10.27-.11-17.17.84-35.24.04-52.27-.12-2.46-.32-4.81-1.09-7.16ZM220.18,344.32c-1.07-.63-12.79,1.69-14.58,2.5-.62.28-.97-.25-.74,1.11,16.32,12.17,37.02,13.33,53.22.28-.02-.8-9.09-4.21-10.27-3.92-3.14,3.83-6.23,8.36-11.53,9.29s-13.66-4.47-16.09-9.25ZM394.35,347.94c-5.79-1.46-11.66-3.11-17.75-2.58-5.85,10.95-18.59,11.91-26.27,2.11-.95-.27-5.54,1.1-6.89,1.47-.72.19-1.49-.36-1.25.86,1.24,2.44,16.38,8.06,19.56,8.66,9.98,1.87,21.49-1.36,29.57-7.42.57-.43,3.69-2.38,3.02-3.09ZM344.62,439.89c11.26-13.92-10.63-26.27-7.07-40.39,1-3.97,3.75-7.88,1.83-12.27-5.94-9.76-10.9-20.22-17-29.87-.5-.8-3.27-5.27-4.15-4.63-.26.98-.49,1.87-.56,2.9-.86,12.18-.28,27.6,0,40,.09,3.96-.09,11.39.59,14.88.1.51.98,2.77,1.83,2.42,2.61-1.07,2.5-7.52,8.27-2.94s14.15,19.51,10.51,27.06c-1.72,3.57-6.22.27-9.35-.52-1.94-.49-6.67-1.91-8.32-1.75s-7.79,4.94-10.59,5.96c-5.38,1.96-9.3,1.39-14.16-1.48-2.02-1.19-5.68-5.08-7.71-5s-7.98,2.85-9.91,3.98c-.69.41-1.34-.09-1.05,1.32,4.33-.25,7.51-2.23,11.45.53,2.02,1.42,4.12,4.88,6.16,6.09,6.2,3.68,15.29,1.42,20.67-2.67,1.61-1.22,3.33-3.94,5.21-4.37,2.9-.66,7.87.8,10.57,1.99,1.08,1.51-2.03,3.42-2.16,4.83,5.52-.82,11.23-1.5,14.95-6.09ZM440.13,398.55c1.75,1.75,12.34-11.28,13.43-12.93,4.67-7.09,7.44-19.46,5.06-27.69-.61-2.13-2.46-5.08-3-1.16-1.11,8.12.76,14.2-3.56,22.02-3.67,6.64-10.07,11.95-11.93,19.76ZM148.42,383.64v-12.52c0-1.08-.98-5.84-1.31-7.21-.27-1.15-2.04-7.69-3.2-4.24-.48,1.43-2.87,9.52-2.88,10.39-.01,2.56,5.63,11.2,7.38,13.59ZM138.57,389.51c-1.57.03.81,3.72,1.11,4.21,1.62,2.6,7.48,8.6,10.32,9.39,5.1,1.43,1.35-3.95-.26-5.62-1.16-1.21-10.24-8-11.18-7.98ZM274.57,445.98c-1.26-3.19-3.87-5.95-4.81-9.3-1.21-4.3-.17-8.69,1.08-12.82,1.34-4.41,4.44-8.38,4.26-13.05-10.42,8.05-16.99,29.37-.53,35.17ZM349.63,493.4c.21-1-.49-1.29-1.1-1.82-2.31-2-6.1-4.41-8.73-6.18-8.23-5.54-17.09-10.25-25.56-15.42-2.63.43-5.51,3.56-8,3.74-4.01.3-6.11-4.52-9.99-2.58l-39.24,21.73c6.7-2.61,13.06-6.03,19.71-8.77,3.85-1.59,15.34-6.64,18.75-6.02,4.93.89,6.81,3.95,12.66,2.83,2.55-.49,6.29-2.97,8.78-2.89,2.75.09,17.07,8.2,20.81,9.98s7.97,3.55,11.9,5.4ZM326.22,498.2c-9.15-2.6-18.56-.24-27.97-.51-4.02-.12-8.71-.73-12.76-1.14l-2.38,1.38c.67.76,1.48,1.52,2.5,1.75,1.67.37,6.35.58,8.38.67,10.55.49,21.71-.11,32.23-.56v-1.59ZM189.4,629.8l-1.03-43.99,1.59-54.88-10.13-15.69c-.8,17.11-.4,34.26-.52,51.45-.12,17.42-2.99,33.67,3.3,50.46,1.64,4.38,3.55,9.2,6.79,12.65ZM323.55,519.51c-11.96-.44-23.95-.78-35.91-.56-.81.02-1.56-.36-1.36.81l8.36,6.56c5.67-.64,12.59,1.27,18.02.67,3.22-.35,8.65-4.93,10.88-7.49ZM402.33,530.7c-1.06-.13-1.76.9-2.4,1.59-1.68,1.82-11.12,12.81-11.42,14.14-2.55,36.28-5.72,72.55-11.72,108.41,16.19-16.61,21.84-40.52,23.41-63.15.66-9.56.18-19.23.53-28.79.39-10.71,1.4-21.47,1.6-32.21ZM504.53,684.69c-27.2,2.27-53.89,8.11-80.74,12.7-16.93,2.9-33.99,5.47-50.99,8.09-10.21,8.43-19.8,17.66-29.02,27.15,3.99-1.05,7.62-4.4,11.22-6.61s7.31-4.57,11.23-6.34c45.55-9.84,91.78-19.18,136.05-33.79.65-.21,2.25-.4,2.25-1.2ZM257.01,729.97c-3.98-4.05-9.04-7.69-13.67-11.09-4.18-3.07-13.89-10.63-18.25-12.11-9.56-3.25-26.09-4.97-36.56-6.57-30.27-4.64-63.23-9.83-93.62-12.32-3.95-.32-8.01-.46-11.97-.53-.28,1.59.42.84,1.25,1.12,24.61,8.34,58.76,13.3,84.86,18.45,17.54,3.46,38.86,5.47,55.6,10.42,10.81,3.2,21.21,10.24,32.36,12.63ZM320.89,741.16c-4.99.73-10.38,3.45-15.29,4.13-6.9.95-15.44-4.65-22.5-5.2,4.47,4.5,13.92,12.82,20.5,12.79,3.3-.02,10.91-5.5,13.57-7.72l3.72-4Z`,
`M562.02,679.89v9.59c-26.98-8.97-53.36-19.96-78.07-34.01-21.67-12.32-42.55-26.08-64.78-37.46-3.87-4.53-3.97-10.85-6.2-16.17.32-.76,1-.07,1.44.16,42.7,22.01,82.52,49.79,126.49,69.46,6.92,3.1,13.99,5.87,21.12,8.43Z`,
`M200.59,415.07c-3.97-1.06-8.28-4.24-11.68-6.69-3.58-2.58-7.04-6.29-10.42-8.75-.72-.52-1.41-1.2-2.38-1.07,3.1,20.45,5.48,41.03,8.58,61.47,1.02,6.73,1.91,14.08,3.29,20.68,3.95,18.85,22.39,37.61,35.22,51.6,8.46,9.22,29,32.58,38.96,37.73s31.13,4.7,43,4.91c18.59.32,29.94,2.14,43.68-12.27,11.57-12.13,25.27-29.28,35.61-42.68,8.58-11.1,15.45-20.12,18.68-34.05,2.69-11.61,4.42-23.53,6.9-35.19,3.59-16.91,8.72-35.1,11.42-51.98.08-.47.31-1.65-.22-1.81-6.83,5.56-13.38,11.65-20.64,16.63-.82.56-5.73,4.09-6.24,3.61,8.7-15.64,22.52-29.05,28.61-46.22,4.28-12.07,2.64-28.66,2.25-41.4-.15-4.99.73-12.25-.23-16.84-1.08-5.23-12.31-22.21-16.24-26.37-1.38-1.46-6.25-4.21-6.41-5.85,2.12-11.54,4.74-23.06,6.32-34.69,2.17-15.95,2.85-29.11-.1-45.05-.91-4.91-1.79-10.34-4.62-14.56.72-.77,2.09.59,2.67,1.06,7.46,6.02,14.66,17.02,18.35,25.86,7.75,18.57,1.07,40.59.28,59.94-.46,11.3,7.41,23.65,8.51,34.63,5.29,53.02-4.86,110.93-15.58,162.9-5.18,25.13-17.84,38.43-33.4,57.68-8.77,10.84-18.27,22.55-27.85,32.6-12.78,13.39-17.71,18.45-37.3,19.37-12.98.61-44.61,1.55-55.77-2.83s-26.91-22.03-35.3-30.73c-12.11-12.56-25.48-26.76-36.44-40.25-12.07-14.86-15.42-22.77-19.01-41.71-6.01-31.76-12.05-67-16.06-99.01-2.16-17.23-2.53-37.54-.6-54.8,1.42-12.68,7.93-19.01,12.62-30,4.66-10.93,1.04-25.32.66-37.12-.26-8.06-.68-18.86,1.24-26.51,2.71-10.77,9.96-20.22,14.5-30.24,1.3-2.46,3.97.68,3.96,2.3-10.73,30.17.33,61.32,3.75,91.72-.25,1.25-4.17,3.68-5.34,4.79-4.39,4.13-9.12,9.09-12.68,13.95-5.16,7.07-7.07,10.61-7.56,19.6-.58,10.5-.67,25.27.03,35.72,1.56,23.49,19.3,42.34,33,59.94Z`,
`M402.33,530.7c-.2,10.74-1.22,21.5-1.6,32.21-.35,9.57.14,19.23-.53,28.79-1.57,22.63-7.22,46.53-23.41,63.15,6-35.87,9.17-72.13,11.72-108.41.3-1.34,9.74-12.32,11.42-14.14.64-.69,1.34-1.72,2.4-1.59Z`,
`M344.62,439.89c-3.71,4.59-9.43,5.26-14.95,6.09.13-1.41,3.24-3.32,2.16-4.83-2.71-1.19-7.68-2.65-10.57-1.99-1.88.43-3.6,3.15-5.21,4.37-5.39,4.09-14.47,6.35-20.67,2.67-2.04-1.21-4.14-4.68-6.16-6.09-3.93-2.76-7.12-.78-11.45-.53-.29-1.42.36-.92,1.05-1.32,1.93-1.14,7.91-3.9,9.91-3.98s5.7,3.81,7.71,5c4.86,2.87,8.78,3.43,14.16,1.48,2.8-1.02,8.9-5.79,10.59-5.96s6.38,1.26,8.32,1.75c3.12.79,7.62,4.09,9.35.52,3.64-7.55-4.51-22.29-10.51-27.06s-5.66,1.87-8.27,2.94c-.85.35-1.73-1.91-1.83-2.42-.68-3.49-.5-10.93-.59-14.88-.27-12.4-.86-27.82,0-40,.07-1.03.31-1.93.56-2.9.88-.64,3.65,3.84,4.15,4.63,6.1,9.65,11.06,20.11,17,29.87,1.92,4.39-.83,8.3-1.83,12.27-3.56,14.11,18.34,26.47,7.07,40.39Z`,
`M257.01,729.97c-11.14-2.39-21.55-9.43-32.36-12.63-16.74-4.95-38.06-6.96-55.6-10.42-26.1-5.15-60.25-10.11-84.86-18.45-.82-.28-1.52.47-1.25-1.12,3.96.07,8.02.21,11.97.53,30.39,2.49,63.34,7.68,93.62,12.32,10.46,1.6,26.99,3.33,36.56,6.57,4.36,1.48,14.07,9.04,18.25,12.11,4.63,3.4,9.69,7.04,13.67,11.09Z`,
`M504.53,684.69c0,.81-1.6.99-2.25,1.2-44.26,14.61-90.5,23.96-136.05,33.79-3.92,1.77-7.58,4.1-11.23,6.34s-7.24,5.56-11.22,6.61c9.22-9.5,18.81-18.72,29.02-27.15,17-2.62,34.06-5.19,50.99-8.09,26.85-4.59,53.54-10.43,80.74-12.7Z`,
`M189.4,629.8c-3.24-3.44-5.15-8.27-6.79-12.65-6.29-16.79-3.42-33.04-3.3-50.46.12-17.19-.28-34.34.52-51.45l10.13,15.69-1.59,54.88,1.03,43.99Z`,
`M283.62,309.04c.18,1.12-.16,1.88-.61,2.85-1.48,3.17-8.74,11.41-11.66,13.37-1.29.86-2.94,1.97-4.48,1.95l-72.15-17.38c.03-1.44,5.82-5.48,7.16-5.52,20.48.95,40.25,6.62,60.32,9.91,8.89,1.46,13.9-.72,21.41-5.18Z`,
`M404.23,310.35c.38.32.53,1,.1.93-4.96,1.53-12.79,1.91-18.26,3.04-16.71,3.47-33.1,8.39-49.76,12.05-2.14-.13-5.69-5.16-6.87-7.02-1.9-3.01-3.43-6.28-4.04-9.81.44-.84.93-.05,1.34.26,2.93,2.16,5.67,5.1,9.57,5.38,19.48-3.87,38.81-8.4,58.58-10.72,2.28.04,7.26,3.52,9.07,5.05Z`,
`M349.63,493.4c-3.93-1.85-7.97-3.54-11.9-5.4s-18.06-9.9-20.81-9.98c-2.49-.08-6.22,2.4-8.78,2.89-5.86,1.11-7.74-1.94-12.66-2.83-3.41-.61-14.9,4.43-18.75,6.02-6.65,2.74-13.01,6.16-19.71,8.77l39.24-21.73c3.88-1.94,5.98,2.88,9.99,2.58,2.49-.19,5.37-3.31,8-3.74,8.47,5.17,17.32,9.88,25.56,15.42,2.63,1.77,6.43,4.18,8.73,6.18.61.53,1.32.82,1.1,1.82Z`,
`M220.18,344.32c2.43,4.78,10.76,10.19,16.09,9.25s8.39-5.45,11.53-9.29c1.18-.29,10.25,3.12,10.27,3.92-16.19,13.06-36.9,11.89-53.22-.28-.22-1.36.12-.82.74-1.11,1.79-.82,13.51-3.13,14.58-2.5Z`,
`M394.35,347.94c.66.71-2.46,2.67-3.02,3.09-8.09,6.06-19.59,9.29-29.57,7.42-3.18-.6-18.32-6.22-19.56-8.66-.24-1.22.53-.66,1.25-.86,1.35-.37,5.94-1.74,6.89-1.47,7.68,9.8,20.42,8.84,26.27-2.11,6.09-.53,11.96,1.12,17.75,2.58Z`,
`M323.55,519.51c-2.23,2.56-7.66,7.14-10.88,7.49-5.44.59-12.35-1.31-18.02-.67l-8.36-6.56c-.21-1.17.55-.8,1.36-.81,11.96-.23,23.95.12,35.91.56Z`,
`M293.2,343.14c.77,2.35.97,4.7,1.09,7.16.8,17.03-.15,35.1-.04,52.27.03,3.96.89,5.83-.35,10.27-.27.94-.47,2.64-1.75,2.23l-.94-18.77.41-10.77-.57-3.2c1.21-11.5-1.47-25.66,0-36.81.17-1.27.65-2.44,2.15-2.37Z`,
`M459.6,321.07c-6.75,7.26-9.42,12.86-14.78,20.63-.57.82-1.39,2.7-2.56,2.5.47-9.64,3.58-16.46,9.36-23.93,2.46-3.18,7.91-11.01,12.22-6.47,2.25,2.37-2.43,5.32-4.24,7.26Z`,
`M440.13,398.55c1.86-7.8,8.26-13.11,11.93-19.76,4.32-7.82,2.44-13.91,3.56-22.02.54-3.92,2.39-.97,3,1.16,2.37,8.23-.39,20.6-5.06,27.69-1.09,1.65-11.68,14.68-13.43,12.93Z`,
`M320.89,741.16l-3.72,4c-2.66,2.22-10.27,7.71-13.57,7.72-6.58.03-16.03-8.29-20.5-12.79,7.06.55,15.6,6.15,22.5,5.2,4.91-.68,10.3-3.4,15.29-4.13Z`,
`M271.91,172.11c.07.79.57,1.23.28,2.09-.64,1.88-9.33,10.76-8.79,11.22,5.25-2.21,9.99-5.2,15.31-7.32,3.71-1.48,8.13-3.05,11.99-3.98.68-.16,1.01-1.04.91.37l-36.19,19.46c2.59-8.62,8.19-17.8,16.49-21.84Z`,
`M373.06,177.43l-44.44,14.39c-.96-.68.22-1.13.62-1.51,5.01-4.69,25.2-12.89,31.84-12.89h11.98Z`,
`M140.96,343.14c-4.02-5.73-7.08-11.97-11.49-17.53-1.68-2.11-9.08-9.18-9.54-10.19-.86-1.9,1.04-3.02,2.96-2.43,3.14.96,9.6,7.96,11.6,10.79,3.87,5.44,6.89,12.57,6.47,19.36Z`,
`M274.57,445.98c-16.46-5.79-9.89-27.11.53-35.17.18,4.67-2.92,8.63-4.26,13.05-1.26,4.13-2.29,8.53-1.08,12.82.94,3.34,3.55,6.11,4.81,9.3Z`,
`M332.07,170.51c-10.44,8.47-22.06,15.35-34.59,20.24l5.3-6.68c5.88-5.51,11.09-6.26,18.11-9.04,3.71-1.47,7.32-3.99,11.19-4.52Z`,
`M326.22,498.2v1.59c-10.53.45-21.69,1.05-32.23.56-2.03-.09-6.71-.3-8.38-.67-1.02-.23-1.83-.99-2.5-1.75l2.38-1.38c4.05.41,8.74,1.02,12.76,1.14,9.41.27,18.82-2.08,27.97.51Z`,
`M129.26,326.62l-4.26,30.65-1.06.79c-2.9-10.7-1.02-20.74,2.06-31.13l3.26-.31Z`,
`M148.42,383.64c-1.75-2.39-7.4-11.03-7.38-13.59,0-.87,2.4-8.96,2.88-10.39,1.15-3.45,2.92,3.09,3.2,4.24.33,1.37,1.31,6.13,1.31,7.21v12.52Z`,
`M138.57,389.51c.94-.02,10.01,6.77,11.18,7.98,1.6,1.67,5.36,7.05.26,5.62-2.84-.8-8.71-6.8-10.32-9.39-.3-.48-2.68-4.17-1.11-4.21Z`
];

function setup() {
  // Make the canvas exactly the size of the SVG viewBox by default
  createCanvas(VIEWBOX.w * SCALE, VIEWBOX.h * SCALE);
  noFill();
  stroke(0);
  strokeWeight(1.2);
}

function draw() {
  background(255);
  push();
  // Align p5 coords with SVG's (top-left origin, y down). We also scale & offset.
  translate(OFFSET.x, OFFSET.y);
  scale(SCALE);

  // Draw each path
  for (const d of PATHS) {
    drawSvgPath(d);
  }

  pop();
  noLoop();
}

// --- SVG Path parser & renderer to p5 -------------------------------------------------

function drawSvgPath(d) {
  const tokens = tokenizePath(d);
  let i = 0;

  let cx = 0, cy = 0;           // current point
  let sx = 0, sy = 0;           // subpath start (for Z)
  let prevCmd = null;
  let prevC2x = null, prevC2y = null; // last cubic control point for 'S'

  beginShape();

  while (i < tokens.length) {
    const cmd = tokens[i++];

    switch (cmd) {
      case 'M':
      case 'm': {
        const isRel = cmd === 'm';
        // 'M' can be followed by multiple pairs: first is moveTo, subsequent pairs are implicit 'L'
        const [x, y] = [tokens[i++], tokens[i++]];
        const nx = (isRel ? cx + x : x);
        const ny = (isRel ? cy + y : y);
        // end previous contour if not starting fresh
        endShape();
        beginShape();
        vertex(nx, ny);
        cx = nx; cy = ny; sx = nx; sy = ny;
        // consume extra pairs as implicit L
        while (i < tokens.length && typeof tokens[i] === 'number' && typeof tokens[i+1] === 'number') {
          const [lx, ly] = [tokens[i++], tokens[i++]];
          const tx = (isRel ? cx + lx : lx);
          const ty = (isRel ? cy + ly : ly);
          vertex(tx, ty);
          cx = tx; cy = ty;
        }
        prevC2x = prevC2y = null;
        prevCmd = 'L';
        break;
      }

      case 'L':
      case 'l': {
        const isRel = cmd === 'l';
        const [x, y] = [tokens[i++], tokens[i++]];
        const nx = (isRel ? cx + x : x);
        const ny = (isRel ? cy + y : y);
        vertex(nx, ny);
        cx = nx; cy = ny;
        prevC2x = prevC2y = null;
        prevCmd = 'L';
        break;
      }

      case 'H':
      case 'h': {
        const isRel = cmd === 'h';
        const x = tokens[i++];
        const nx = (isRel ? cx + x : x);
        vertex(nx, cy);
        cx = nx;
        prevC2x = prevC2y = null;
        prevCmd = 'L';
        break;
      }

      case 'V':
      case 'v': {
        const isRel = cmd === 'v';
        const y = tokens[i++];
        const ny = (isRel ? cy + y : y);
        vertex(cx, ny);
        cy = ny;
        prevC2x = prevC2y = null;
        prevCmd = 'L';
        break;
      }

      case 'C':
      case 'c': {
        const isRel = cmd === 'c';
        const [x1, y1, x2, y2, x, y] = [tokens[i++], tokens[i++], tokens[i++], tokens[i++], tokens[i++], tokens[i++]];
        const c1x = isRel ? cx + x1 : x1;
        const c1y = isRel ? cy + y1 : y1;
        const c2x = isRel ? cx + x2 : x2;
        const c2y = isRel ? cy + y2 : y2;
        const nx  = isRel ? cx + x  : x;
        const ny  = isRel ? cy + y  : y;
        // In p5, must have an initial anchor point (we do). Add cubic segment:
        bezierVertex(c1x, c1y, c2x, c2y, nx, ny);
        prevC2x = c2x; prevC2y = c2y;
        cx = nx; cy = ny;
        prevCmd = 'C';
        break;
      }

      case 'S':
      case 's': {
        const isRel = cmd === 's';
        const [x2, y2, x, y] = [tokens[i++], tokens[i++], tokens[i++], tokens[i++]];
        // Reflect previous cubic control point if previous was C/S, else use current point
        let c1x = cx, c1y = cy;
        if (prevCmd === 'C' || prevCmd === 'S') {
          c1x = 2*cx - (prevC2x ?? cx);
          c1y = 2*cy - (prevC2y ?? cy);
        }
        const c2x = isRel ? cx + x2 : x2;
        const c2y = isRel ? cy + y2 : y2;
        const nx  = isRel ? cx + x  : x;
        const ny  = isRel ? cy + y  : y;
        bezierVertex(c1x, c1y, c2x, c2y, nx, ny);
        prevC2x = c2x; prevC2y = c2y;
        cx = nx; cy = ny;
        prevCmd = 'S';
        break;
      }

      case 'Q':
      case 'q': {
        const isRel = cmd === 'q';
        const [x1, y1, x, y] = [tokens[i++], tokens[i++], tokens[i++], tokens[i++]];
        const c1x = isRel ? cx + x1 : x1;
        const c1y = isRel ? cy + y1 : y1;
        const nx  = isRel ? cx + x  : x;
        const ny  = isRel ? cy + y  : y;
        quadraticVertex(c1x, c1y, nx, ny);
        prevC2x = c1x; prevC2y = c1y; // for potential T reflection
        cx = nx; cy = ny;
        prevCmd = 'Q';
        break;
      }

      case 'T':
      case 't': {
        const isRel = cmd === 't';
        const [x, y] = [tokens[i++], tokens[i++]];
        // Reflect previous quadratic control point if prior was Q/T
        let c1x = cx, c1y = cy;
        if (prevCmd === 'Q' || prevCmd === 'T') {
          c1x = 2*cx - (prevC2x ?? cx);
          c1y = 2*cy - (prevC2y ?? cy);
        }
        const nx = isRel ? cx + x : x;
        const ny = isRel ? cy + y : y;
        quadraticVertex(c1x, c1y, nx, ny);
        prevC2x = c1x; prevC2y = c1y;
        cx = nx; cy = ny;
        prevCmd = 'T';
        break;
      }

      case 'Z':
      case 'z': {
        // Close current subpath
        endShape(CLOSE);
        // Prepare for a potential new subpath without double beginShape
        beginShape();
        vertex(sx, sy);
        cx = sx; cy = sy;
        prevC2x = prevC2y = null;
        prevCmd = 'Z';
        break;
      }

      default:
        // Should not happen; tokens are only commands or numbers.
        break;
    }
  }

  endShape();
}

function tokenizePath(d) {
  // Split commands and numbers into a linear token array: [ 'M', 10, 20, 'L', 30, 40, ... ]
  const out = [];
  const re = /([MmLlHhVvCcSsQqTtZz])|([-+]?\d*\.?\d+(?:[eE][-+]?\d+)?)/g;
  let m;
  while ((m = re.exec(d)) !== null) {
    if (m[1]) {
      out.push(m[1]); // command
    } else if (m[2]) {
      out.push(parseFloat(m[2])); // number
    }
  }
  return out;
}
